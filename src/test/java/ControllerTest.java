import Controller.controller;
import Model.Fruit;
import Model.Order;
import Validation.ValidatorMock;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;

import static org.junit.jupiter.api.Assertions.*;

class ControllerTest {
    private controller control;
    private ArrayList<Fruit> listFruit;
    private HashMap<String, ArrayList<Order>> listOrder;
    private ValidatorMock validMock;

    @BeforeEach
    void setUp() {
        control = new controller();
        listFruit = new ArrayList<>();
        listOrder = new HashMap<>();
        validMock = new ValidatorMock();
    }

    // 1Ô∏è‚É£ Test th√™m tr√°i c√¢y v√†o danh s√°ch
    @Test
    void testAddFruit() {
        listFruit.add(new Fruit("F1", "T√°o", 10.0, 5, "USA"));
        assertEquals(1, listFruit.size(), "Danh s√°ch tr√°i c√¢y ph·∫£i c√≥ ƒë√∫ng 1 ph·∫ßn t·ª≠");
    }

    // 2Ô∏è‚É£ Test hi·ªÉn th·ªã danh s√°ch tr√°i c√¢y
    @Test
    void testDisplayFruitList() {
        listFruit.add(new Fruit("F1", "T√°o", 10.0, 5, "USA"));
        listFruit.add(new Fruit("F2", "Cam", 15.0, 3, "Vietnam"));
        
        assertEquals(2, listFruit.size(), "Danh s√°ch tr√°i c√¢y ph·∫£i c√≥ ƒë√∫ng 2 s·∫£n ph·∫©m");
    }

    // 3Ô∏è‚É£ Test mua h√†ng v·ªõi d·ªØ li·ªáu gi·∫£ l·∫≠p
    @Test
    void testBuyFruit() {
        listFruit.add(new Fruit("F1", "T√°o", 10.0, 5, "USA"));

        // üîπ Th√™m d·ªØ li·ªáu gi·∫£ l·∫≠p: Ch·ªçn item 1, mua 2 qu·∫£, x√°c nh·∫≠n Y, nh·∫≠p t√™n "Hoang"
        validMock.addInput("1");   // Ch·ªçn Item s·ªë 1
        validMock.addInput("2");   // Mua s·ªë l∆∞·ª£ng 2
        validMock.addInput("Y");   // X√°c nh·∫≠n ti·∫øp t·ª•c
        validMock.addInput("Hoang"); // Nh·∫≠p t√™n kh√°ch h√†ng

        control.shopping(listFruit, listOrder);

        assertFalse(listOrder.isEmpty(), "Danh s√°ch ƒë∆°n h√†ng kh√¥ng ƒë∆∞·ª£c r·ªóng sau khi mua h√†ng");
        assertEquals(3, listFruit.get(0).getQuantity(), "S·ªë l∆∞·ª£ng s·∫£n ph·∫©m ph·∫£i gi·∫£m sau khi mua");
    }

    // 4Ô∏è‚É£ Test x√≥a tr√°i c√¢y kh·ªèi danh s√°ch
    @Test
    void testDeleteFruit() {
        listFruit.add(new Fruit("F1", "T√°o", 10.0, 5, "USA"));
        listFruit.removeIf(fruit -> fruit.getFruitId().equals("F1"));
        
        assertEquals(0, listFruit.size(), "Danh s√°ch tr√°i c√¢y ph·∫£i r·ªóng sau khi x√≥a");
    }

    // 5Ô∏è‚É£ Test ki·ªÉm tra ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá
    @Test
    void testInvalidInput() {
        validMock.addInput("abc");  // Nh·∫≠p gi√° tr·ªã sai

        assertThrows(NumberFormatException.class, () -> validMock.checkInputDouble(), "Nh·∫≠p sai ki·ªÉu d·ªØ li·ªáu ph·∫£i b√°o l·ªói");
    }
}
